/*
	Fingerprints a browser by randomly selecting a browser profile.
	Browser profile generated by running profileBrowser.html in different browsers
	
	HARD-CODED BROWSER OBJECT TO BE CHANGED TO READING FROM A SOURCE
*/

var page = require('webpage').create(),
	browserFingerprints,
	url = 'https://panopticlick.eff.org/index.php?action=log&js=yes';

/* Object of browser fingerprint array
 * To be replaced by reading programmatically
 */

browserFingerprints = {
 	"browserObjects" : [
 		{
 			"userAgent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.65 Safari/537.36",
 			"language":"en-US",
 			"colorDepth":24,
 			"width":1600,
 			"height":900,
 			"timezoneOffset":300,
 			"localStorage":true,
 			"sessionStorage":true,
 			"plugins": {"0":{"description":"Shockwave Flash 11.8 r800","name":"Shockwave Flash","filename":"libpepflashplayer.so"},"1":{"description":"This plugin allows you to securely access other computers that have been shared with you. To use this plugin you must first install the <a href=\"https://chrome.google.com/remotedesktop\">Chrome Remote Desktop</a> webapp.","name":"Chrome Remote Desktop Viewer","filename":"internal-remoting-viewer"},"2":{"description":"Enables Widevine licenses for playback of HTML audio/video content.","name":"Widevine Content Decryption Module","filename":"libwidevinecdmadapter.so"},"3":{"description":"","name":"Native Client","filename":"libppGoogleNaClPluginChrome.so"},"4":{"description":"","name":"Chrome PDF Viewer","filename":"libpdf.so"},"5":{"description":"This plug-in detects the presence of iTunes when opening iTunes Store URLs in a web page with Firefox.","name":"iTunes Application Detector","filename":"librhythmbox-itms-detection-plugin.so"},"6":{"description":"The <a href=\"http://www.gnome.org/projects/totem/\">Totem</a> 3.4.3 plugin handles video and audio streams.","name":"VLC Multimedia Plugin (compatible Totem 3.4.3)","filename":"libtotem-cone-plugin.so"},"7":{"description":"The <a href=\"http://www.gnome.org/projects/totem/\">Totem</a> 3.4.3 plugin handles video and audio streams.","name":"Windows Media Player Plug-in 10 (compatible; Totem)","filename":"libtotem-gmp-plugin.so"},"8":{"description":"DivX Web Player version 1.4.0.233","name":"DivX® Web Player","filename":"libtotem-mully-plugin.so"},"9":{"description":"The <a href=\"http://www.gnome.org/projects/totem/\">Totem</a> 3.4.3 plugin handles video and audio streams.","name":"QuickTime Plug-in 7.6.6","filename":"libtotem-narrowspace-plugin.so"},"length":{}
 			}
 		}, {
 			"userAgent":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0",
 			"language":"en-US",
 			"colorDepth":24,
 			"width":1600,
 			"height":900,
 			"timezoneOffset":300,
 			"localStorage":true,
 			"sessionStorage":true,
 			"plugins": {
 				"0":{"description":"This plug-in detects the presence of iTunes when opening iTunes Store URLs in a web page with Firefox.","name":"iTunes Application Detector","filename":"librhythmbox-itms-detection-plugin.so"},"1":{"description":"The <a href=\"http://www.gnome.org/projects/totem/\">Totem</a> 3.4.3 plugin handles video and audio streams.","name":"QuickTime Plug-in 7.6.6","filename":"libtotem-narrowspace-plugin.so"},"2":{"description":"The <a href=\"http://www.gnome.org/projects/totem/\">Totem</a> 3.4.3 plugin handles video and audio streams.","name":"VLC Multimedia Plugin (compatible Totem 3.4.3)","filename":"libtotem-cone-plugin.so"},"3":{"description":"The <a href=\"http://www.gnome.org/projects/totem/\">Totem</a> 3.4.3 plugin handles video and audio streams.","name":"Windows Media Player Plug-in 10 (compatible; Totem)","filename":"libtotem-gmp-plugin.so"},"4":{"description":"DivX Web Player version 1.4.0.233","name":"DivX® Web Player","filename":"libtotem-mully-plugin.so"
 				}
 			}
 		}
 	]
};

var browseArray = browserFingerprints.browserObjects;
var browseObject = browseArray[Math.floor(Math.random()*browseArray.length)];
page.settings.userAgent = browseObject.userAgent;
//console.log(JSON.stringify(browseObject));

page.onConsoleMessage = function(msg) {
	console.log(msg);
};

//console.log(JSON.stringify(page.settings));

page.onInitialized = function() {
	/*var browseArray = browserFingerprints.browserObjects;
	var browseObject = browseArray[Math.floor(Math.random()*browseArray.length)];
	//console.log(JSON.stringify(browseObject));
	settings.userAgent = browseObject.userAgent;*/
	var returnVal = page.evaluate(function (browseObject) {
		(function () {
			var plugins = navigator.plugins;
            
            navigator = {
                appCodeName: navigator.appCodeName,
                appName: navigator.appName,
                appVersion: navigator.appVersion,
                cookieEnabled: navigator.cookieEnabled,
                doNotTrack: navigator.doNotTrack,
                geolocation: navigator.geolocation,
                language: browseObject.language,
                mimeTypes: navigator.mimeTypes,
                onLine: navigator.onLine,
                platform: navigator.platform,
                plugins: navigator.plugins,
                product: navigator.product,
                productSub: navigator.productSub,
                userAgent: browseObject.userAgent,
                vendor: navigator.vendor,
                vendorSub: navigator.vendorSub,
                __proto__: navigator.__proto__
            };

            screen = {
            	width : browseObject.width,
            	availHeight : screen.availHeight,
            	height : browseObject.height,
            	availWidth : screen.availWidth,
            	availLeft : screen.availLeft,
            	colorDepth : browseObject.colorDepth,
            	pixelDepth : screen.pixelDepth
            };

            var pluginObj = {};
            pluginObj.length = Object.keys(browseObject.plugins).length;
            Object.keys(browseObject.plugins).forEach(function(key) {
            	pluginObj[key] = browseObject.plugins[key];
            });
            pluginObj.refresh = plugins.refresh;
            pluginObj.item = plugins.item;
            pluginObj.namedItem = plugins.namedItem;
            //console.log('Length: ' + Object.keys(browseObject.plugins).length);
            //navigator.plugins.length = Object.keys(browseObject.plugins).length;
            navigator.plugins = pluginObj;
		})();
	}, browseObject);
};

page.open(url, function(status) {
	window.setTimeout(function() {
        page.render('expPan.png');
        console.log('Fingerprint rendered in \'expPan.png\'');

        phantom.exit();
    }, 10500);
});